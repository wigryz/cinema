version: 2.1
jobs:
  backend-build:
    docker:
      - image: cimg/openjdk:16.0
    environment:
      CIRCLE_WORKING_DIRECTORY: backend
    steps:
      - run: 
          name: Printing some paths
          command: pwd \
           ls -a \
           echo ${CIRCLE_WORKING_DIRECTORY}

      - run:
          name: Clearing project directory
          command: rm -rf /home/circleci/project

      - checkout

      - restore_cache:
          key: cinema-backend-{{ checksum "backend/pom.xml" }}

      - run:
          name: Downloading dependencies
          command: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: cinema-backend-{{ checksum "pom.xml" }}

      - run:
          name: Verifying (build => unit => integration)
          command: ./mvnw verify

      - run:
          name: Printing code coverage
          when: on_success
          command: |
            awk -F, \
              '{ instructions += $4 + $5; intr_cov += $5; \
                 branches += $6 + $7; bran_cov += $7; \
                 lines += $8 + $9; line_cov += $9; \
                 complexity += $10 + $11; comp_cov += $11; \
                 methods += $12 + $13; meth_cov += $113;} END \
               { printf "INSTRUCTIONS COVERAGE\n"; \
                 printf "%6d / %6d = %4.2f%% instructions covered\n", intr_cov, instructions, instructions ? 100*intr_cov/instructions : 0; \
                 printf "LINES COVERAGE\n"; \
                 printf "%6d / %6d = %4.2f%% lines covered\n", line_cov, lines, lines ? 100*line_cov/lines : 0; \
                 printf "METHODS COVERAGE\n"; \
                 printf "%6d / %6d = %4.2f%% methods covered\n", meth_cov, methods, methods ? 100*meth_cov/methods : 0; \
                 printf "BRANCHES COVERAGE\n"; \
                 printf "%6d / %6d = %4.2f%% branches covered\n", bran_cov, branches, branches ? 100*bran_cov/branches : 0; \
                 printf "COMPLEXITY COVERAGE\n"; \
                 printf "%6d / %6d = %4.2f%% complexities covered\n", comp_cov, complexity, complexity ? 100*comp_cov/complexity : 0; }' \
              target/coverage_reports/jacoco.csv

      - run:
          name: Validating imports
          when: on_success
          command: ./mvnw impsort:check

      - store_test_results:
          name: Uploading unit test results
          path: target/surefire-reports

      - store_test_results:
          name: Uploading integration test results
          path: target/failsafe-reports

      - store_artifacts:
          name: Uploading coverage reports to artifacts
          path: target/coverage_reports


workflows:
  backend-and-frontend:
    jobs:
      - backend-build
